###############################################################################################################
#    history.txt   Copyright (C) <2023 - 2024>  <Kevin Scott>                                                 #
#                                                                                                             #
#    History file for pyWeatherApps                                                                           #
#                                                                                                             #
#                                                                                                             #
###############################################################################################################
#    Copyright (C) <2023 - 2024>  <Kevin Scott>                                                               #
#                                                                                                             #
#    This program is free software: you can redistribute it and/or modify it under the terms of the           #
#    GNU General Public License as published by the Free Software Foundation, either Version 3 of the         #
#    License, or (at your option) any later Version.                                                          #
#                                                                                                             #
#    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without        #
#    even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
#    GNU General Public License for more details.                                                             #
#                                                                                                             #
#    You should have received a copy of the GNU General Public License along with this program.               #
#    If not, see <http://www.gnu.org/licenses/>.                                                              #
#                                                                                                             #
###############################################################################################################


V2024.30  [27 February 2024]

    Added value checking to the command line argument for month and year.
        The month must be a valid month.
        The year has to be from [2023, 2024].
    Corrected but in the directory paths if month and year supplied as arguments.
    Corrected bug in the target directory path, if month supplied as an argument.
    Running on Python V3.12.2.

    ----------------------------------------------------------------------------------------------
    File                                                       blank        comment           code
    ----------------------------------------------------------------------------------------------
    pyWeatherApps\src\config.py                                   36             50            134
    pyWeatherApps\src\dataSQLReport.py                            39             25            106
    pyWeatherApps\src\utils\dataUtils.py                          37             57            102
    pyWeatherApps\src\classes\records.py                          32             48            100
    pyWeatherApps\src\classes\weatherData.py                      45             54             98
    pyWeatherApps\main.py                                         32             32             93
    pyWeatherApps\src\classes\sql3Data.py                         40            102             90
    pyWeatherApps\src\dataSQLBuild.py                             26             28             81
    pyWeatherApps\src\args.py                                     25             56             71
    pyWeatherApps\src\classes\dataClasses.py                       7             25             64
    pyWeatherApps\src\dataXReport.py                              25             22             40
    pyWeatherApps\src\timer.py                                    16             40             31
    pyWeatherApps\ruff.toml                                        7              8             30
    pyWeatherApps\src\dataXBuild.py                               17             25             29
    pyWeatherApps\src\classes\dataMapping.py                       4             24             22
    pyWeatherApps\src\license.py                                  10             40             22
    pyWeatherApps\build.bat                                        4              0             19
    pyWeatherApps\src\logger.py                                   11             28             18
    pyWeatherApps\config.toml                                      4              7             15
    pyWeatherApps\src\console.py                                   9             28             12
    pyWeatherApps\src\classes\allTimeRecords.py                   10             30              6
    pyWeatherApps\src\classes\monthlyRecords.py                   10             30              6
    pyWeatherApps\src\classes\yearlyRecords.py                    10             30              6
    ----------------------------------------------------------------------------------------------
    SUM:                                                         456            789           1195
    ----------------------------------------------------------------------------------------------

V2024.29  [12 February 2024]

    Added records for the number of dry and rain days per month.
        Only works [tested] for current month so far.
        The data is stored on the XtraData SQL table.


V2024.28  [16 January 2024]

    Added two new command line arguments, -al and -as.
        -as  Saves the data directory to a archive file.  The default is zip but can be changes in the config file.
        -al  Loads the archive file into the data directory.
        Both arguments should have a second argument of a filename.  -as without extension, -al with.
        This is because the type of archive is derived from the extension and -as add the correct one.
    Corrected typos and added missing fields to writeDefaultConfig in config.py
    Tidied up buildFileName in dataUtils.py, now pas the config object instead of a large number of single arguments.
    Hopefully finally sorted out auto create SQL tables --CreateYes.
    Running on Python V3.12.1.


V2024.27  [10 January 2024]

    With the new year, the data directory structure could become a little messy.
    So, amend the structure to consist of a series of sub directors below data - one for each year.
    The xl, db and record files will reside within each year directory.
    Main changes to confit ant util files.
    The directory paths are checked on program start and if don't exist, they will be created.
    Amended copyright year to 2023 - 2024 on changed files.


V2023.26  [30 December 2023]

    Added the number of rain days in a given month, also update yearly and all time reports.
        This data in saved in a xtra SQL table stored within the month file.
    Corrected some bugs in the saving of rain data generally.



V2023.25  [7 November 2023]

    Added the argument -CT [--CreateYes], will create the SLQlite table; but will not ask for confirmation.
        mainly used in build.bat.
    The report type [monthly, yearly or allTime] is passed to the report class.
    Amended the reports to format values correctly and add imperial equivalents, if appropriate.
        Also correct spelling mistakes.
    Added a new table, XtraData, to hole number of rain days - not reported on yet.


V2023.24  [21 October 2023]

    Perfected the calculation of night time maximum and day time min temperatures.
        Added fetchall() to sql3Data.py. this returns a complete column as a list.
    Added divided lines to the display table.
    The day, month and year are now saved separately when the data is built.
        This makes late calculations and display easier.


V2023.23  [17 October 2023] back in main branch.

    Added the calculation of monthly average temperature, night time maximum and day time min temperature.


V2023.22  [16 October 2023] in parent branch.

    Minor changes to rename Records to monthlyRecords.
    Changes case of create and command arguments, so that flag and arguments are the same.
    merged back into main.


V2023.21  [13 October 2023]

    Created a new branch parent.
        The three records class share a lot of duplication.  So, a parent class, Records, was created and
        the tree record classes inherited from this.  Most of the logic was then moved into the parent class.
        This removed a lot of duplication and simplified the record class structure.


V2023.20  [2 October 2023]

    Added units to report mode, also added imperial measure {in brackets] to metric units.}
        Also corrected spelling mistake to env_3.12 IndoorTemp[e]rature.
    Changed over the command line arguments for create and print config.
        -C for create, using capitals so harder to enter by mistake.
        -c for print config.

    main.py - and confirm if create is chosen.
    console.py - moved the table import to here.


V2023.19  [24 September 2023]

    Added an all yearly records table - called by main.py -Y.

    args.py - Added the command line argument -Y.  Changed -rA to -A.
    allTimeRecords.py - Corrected a bug where min values was not being handled correctly.
    monthlyRecords.py - Corrected a bug where min values was not being handled correctly.
    yearRecords.py    - Corrected a bug where min values was not being handled correctly.
                      - finished the class, results are displayed in a table.
    dataSQLReport.py  - changes for above.
    dataUtils.py - Added yearly and all time record file paths to printConfig()


V2023.18  [21 September 2023]

    Added an all time records table - called by main.py -A.

    args.py - Added the command line argument -rA.
    allTimeRecords.py - finished the class, results are displayed in a table.
    yearRecords.py - copy of above, will hold records for an individual year.
    config.py - Added the property ALLTIME_RECORD_FILES
    dataSQLReport.py - changes for above.
    dataClasses.py - Corrected bug, rainWeekly was in twice - changed one to rainMonthly.


V2023.17  [20 September 2023]

    Running on python V3.12.0rc2.
    All sources now pass ruff check . - [https://github.com/astral-sh/ruff]

    Finished the -r [report] option, the high and lows for each moth are display on the screen on a table.

    main.py - pass the month and year to utils.printConfig()
              pass the month and year to dataSQLReport.report()
              corrected bug in passing the report file to dataSQLReport.report()
    monthlyRecords.py - add show(), which display the high and lows in table format.
    config.py - added the properties month and year.
    requirements.txt - updated Pygments and rich to latest versions.


V2023.16  [18 September 2023]

    Build.bat - A new file, a simple bat file to create, build or report on files across a range or months and years.
    config.py - Added a new property - the location of the record files, YEAR_RECORD_FILES.
                Added a new property - the locations DATA_DIR, REC_DIR and DB_DIR.
    monthlyRecords.py - Stores all the high and lows for the month - now working.
    allTimeRecords.py - Stores all the absolute high and lows - now working.


V2023.15  [13 September 2024]

    Changed the way the app looks for data files.  The data files are stored in month directories with a year directory.
    I now store the year and month separately, and build the filename for there - this can then be supplied via command line.
    This should allow the app the run a script and batch build several months at once.
    config - changed the DATA options from directory, mainWB, mainDB and target to
                 data_dir, rec_dir, month, year and target.
                 Changed to config.toml and config.py.
    args.py - Added option -C to print out the current config values.
              Added options -m & -y to pass in the month and year of the data.
    dataUtils.py - added functions printConfig() and buildFileNames()
    monthlyRecords.py & allTimeRecords.py - class to store highLows - to be used.


V2023.14  [12 September 2023]

    Moved classes\sql3Report.py to src.
    Moved src\weatherDatapy to classes.
    args.py          - args.Version now uses utils.logPrint().
                       args.report can now have a second argument, a filename to report on.
    sql3Report.py    - Start of the reporting process.  Contains initial log to scan the months database.
    sql3Data.py      - The highLows table no longer stores the date.
                       The fetchall() was renamed to count() - that's what it did.
                       A fetchone() was added.
    allTimeRecors.py - A class to hold the all time high and lows.
    dataClasses.py   - The __post_init__ now checks values are numeric and not just floats.
                           Some values where being passed in as ints.


V2023.13

    sql3Data.py     - Added a second table to store the high and lows for the month.
                      Added an index column [integer on autoincrement] to each table.
    dataSQLBuild.py - Amended so that the create mode returns after calling create


V2023.12

    agrs.py      - Added an extra command line argument -c, this creates the sql tables.
                   Use this at start to initialise a new database [or to clear the database].
    main.py      - The sql build is now called from a try exception block.  Catches no tables error [see above].
                   Sql version printed in verbose mode if build in sql.
    dataUtils.py - added function to return slq version.
    sql3Data.py  - Added try exception block to fetchall function.
    sqlReport.py - New file, will report on highs and lows in sql mode.


V2023.11

    Added the ability to store the aggregate data in sqlite3 as well as excel.
    Renamed dataBuild.py to dataXbuild.py and dataReport.py to dataXreport.pt - to store and report on Excell data.
    Added dataSQLBuild.py to store the data in a sqlite3 database.
        This mimics dataXbuild.pt by looping through the daily spreadsheets, but writes to a sqlite3 database.
    Added a command line argument -c [-create] to create the initial sqlite3 database and tables.
        This could be combined, so -cbr [create - build - report] will work.


V2023.10

    Added the python package rich.
        Rich is a Python library for writing rich text (with colour and style) to the terminal,
        and for displaying advanced content such as tables, markdown, and syntax highlighted code.
        The configuration of such is a console class in src.console.py
    Removed the use of colorama.
    Added a command line arguments -v [--verbose] to control the amount of detail displayed.
    Changes to source files to reflect the two above additions.


V2023.9

    Added utils function maxMin(), given a values and the current record will return the new record.
        Also return the corresponding date.
    Added a __post_init__ function to the data class weatherValues.
        This checks each values is a float, if not sets the values to a float (currently 200.00).
    dataReport.py now displays the max and min values for outdoor and indoor temperatures plus rain rate.


V2023.8

    Added dataReport.py - will be the report part of the app. This will find the highs and lows.
        This is loosely based on dataBuild.py.
    Added arguments to main.py to either call build or report (should call build and then report).


V2023.7

    Converted weatherValues class to be a dataClass.
        Makes the logic in weatherData simple and clean.


V2023.6

    Changed the way the spreadsheet is read in weatherData.py from reading a row at a time
    to reading individual cells values.  This method returns actual value type i.e floats
    and not strings.  This will be useful in the reporting app.
    Added logPrint to src.utils.dataUtils.  This allows the same message to be
    displayed and logged - reduces duplicate code.


V2023.5

    Renamed some of the source files to have a prefix of build [a report app coming soon).
    Added the config options
        for the location and name for the main spreadsheet.
        for the glob string for the target files( that are merged into the main spreadsheet.)
    Moved the pyDataBuild.py into the src directory.
    Created a main.py that sets things up and calls pyDataBuild.


V2023.4

    Added to WeatherData class.
        __contains__ - checks to see if a given data set is in the data dictionary.
        add()        - adds data to the data dictionary.
        saveData     - saves the dictionary to a spreadsheet
        saveDataJson - saves the dictionary to a text file using json, uses a custom json encoder.

    The spreadsheets are now loaded correctly and their data is added to the main dictionary if not already included.


V2023.3

    Added to WeatherData class.
        countData() - Return the number of entries in the dictionary.
        nextRow()   - Returns the data in the dictionary, one line at a time.

    The spreadsheets are now loaded into classes and make their data available one row at a time.


V2023.2

    Created a class WeatherData in weatherData.py.
        This will hold the data form a single spreadsheet of weather data, typically daily; held in a dictionaryrm *.json.
        It will also contain the necessary methods to manipulate the data.  i.e. load, add etc.
        Only loadFile and loadData so far.
    Created a class weatherValues in dataClasses.py.
        This will hold the data from a single row of the spreadsheet.
    Created a data mapping in dataMapping.
        This is a mappings for the weather spreadsheet column headers.

    The spreadsheet load into weatherData class, but still working on loading the rows.

    Also source passes ruff check - I ignore the 80 column line limit, I have a wide monitor ;-)


V2023.1

    Basic framework - taken from pyMp3Duplicate.
    App excepts command line arguments -h, -l, -e only.
    Only config options are name and version number.
    Creates a logger file in the logs directory.
